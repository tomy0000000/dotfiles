[alias]
a = "add"
b = "branch"
c = "commit"
d = "diff"
f = "fetch"
g = "grep --break --heading --line-number"
l = "log"
m = "merge"
o = "checkout"
p = "pull"
r = "remote"
s = "status --short --branch"
w = "whatchanged"

tower = "!gittower ."
unadd = "reset HEAD"
unstage = "reset HEAD"
uncommit = "reset --soft HEAD~1"

### add ###
a-a = "add --all --ignore-removal" # New, Modified
a-ar = "add --all" # New, Modified, Deletion
a-u = "add --update" # Modified, Deletion
a-p = "add --patch"

### clone ###
cl = "clone"
cl-r = "clone --recursive"

### commit ###
c-i = "commit --interactive"
c-m = "commit --message"
am = "commit --amend"
am-m = "commit --amend --message"

### config ###
cf = "config"
cf-e = !"git config --edit --file ${HOME}/.gitconfig-custom"
cf-l = "config --list"
cf-ll = "config --list --show-scope"
cf-lll = "config --list --show-scope --show-origin"

### grep ###
grep-all = !"f() { git rev-list --all | xargs git grep \"$@\"; }; f"
grep-ack = \
    -c color.grep.linenumber=\"bold yellow\" \
    -c color.grep.filename=\"bold green\" \
    -c color.grep.match=\"reverse yellow\" \
    grep --break --heading --line-number

### ls-files ###
ls = "ls-files"
ls-ignored = "ls-files --others --i --exclude-standard"

### remote ###
r-ls = "remote -v"

### stash ###
st = "stash"
save = "stash push"
load = "stash apply"
pop = "stash pop"
st-l = "stash list"
st-s = "stash show"
st-p = "stash pop"

### submodule ###
sm = "submodule"
sm-u = "submodule update --init"
sm-ur = "submodule update --init --recursive"

### functions ###

# Last tag in current branch
lasttag = describe --tags --abbrev=0
# Last tag in all branches
lasttagged = !git describe --tags `git rev-list --tags --max-count=1`

# fixup = "commit --amend --no-edit"
# fixup = "!f() { TARGET=$(git rev-parse "${1:-HEAD}"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"

# Generate .gitignore file
# https://docs.gitignore.io/install/command-line
gen-ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"

# Show branches sort by date
refs-by-date = "for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'"
